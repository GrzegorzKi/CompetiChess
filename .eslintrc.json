{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "airbnb"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2021,
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "@typescript-eslint"
  ],
  "rules": {
    "indent": ["error", 2],
    "quotes": ["error", "single"],
    "linebreak-style": "off",

    "comma-dangle": ["error", "only-multiline"],
    "no-console": "warn",
    "no-empty": "warn",
    "react/jsx-props-no-spreading": "off",

    "jsx-a11y/label-has-associated-control": [ "error", {
      "required": {
        "some": [ "nesting", "id" ]
      }
    }],
    "jsx-a11y/label-has-for": [ "error", {
      "required": {
        "some": [ "nesting", "id" ]
      }
    }],

    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index", "object"],
        "newlines-between": "always",
        "alphabetize": { "order": "asc", "caseInsensitive": true }
      }
    ],
    "lines-between-class-members": ["error", "always", {
      "exceptAfterSingleLine": true
    }],
    "object-curly-spacing": [
      "warn",
      "always",
      {
        "arraysInObjects": false
      }
    ],

    // Disabling the base rules as it can report incorrect errors
    "no-use-before-define": "off",
    "no-unused-vars": "off",
    "no-shadow": "off",

    "@typescript-eslint/no-use-before-define": "error",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      { "vars": "all", "args": "after-used", "ignoreRestSiblings": false }
    ],
    "@typescript-eslint/no-shadow": ["error"],

    // React, Next.js and TypeScript adjustments
    "react/react-in-jsx-scope": "off",
    "react/jsx-filename-extension": [
      "warn",
      {
        "extensions": [
          ".tsx"
        ]
      }
    ],
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "never",
        "tsx": "never"
      }
    ],
    // We're using TypeScript type checking, so these rules do not apply
    "no-undef": "off",
    "react/prop-types": "off",
    "react/require-default-props": "off",
    "react/destructuring-assignment": "off"
  },
  "settings": {
    "import/resolver": {
      "typescript": {}
    }
  }
}
